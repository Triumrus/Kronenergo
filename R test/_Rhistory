group by DATE,HOUR) b
on a.id=b.id
left join (SELECT DATE(dt_iso_2 + interval TIMEZONE_TO_UTC HOUR) as DATE,HOUR(dt_iso_2 + interval TIMEZONE_TO_UTC HOUR) as HOUR,we.city_id,we.dt
,dt_iso
,lat
,lon
,temp
,temp_min
,temp_max
,pressure
,sea_level
,grnd_level
,humidity
,wind_speed
,wind_deg
,rain_1h
,rain_3h
,rain_24h
,rain_today
,snow_1h
,snow_3h
,snow_24h
,snow_today
,clouds_all
,weather_id
,weather_main
,weather_description
,weather_icon
,dt_iso_2
,we.id
,@quot as lag_quot
,@quot:=(HOUR(dt_iso_2)+1) curr_quote
,@quot2 as lag_quot2
,@quot2:=(HOUR(dt_iso_2)+2) curr_quote2
FROM  (
select a.*
from energo.historical_data_weather a
inner join (
select max(id) as id
from energo.historical_data_weather
where city_id = 480060
group by dt_iso_2) b
on a.id=b.id
) we
join (select @quot= -1 ) r
join (select @quot= -2 ) r2
left join energo.clients_gtp_time ti
on we.CITY_ID = ti.CITY_ID
order by dt_iso_2
) w
on a.DATE=w.DATE
and a.CITY_ID = w.city_id
and a.HOUR =
case
when a.HOUR = w.HOUR then  w.HOUR
when a.HOUR != w.HOUR and a.HOUR != w.curr_quote then  w.curr_quote2
when a.HOUR != w.HOUR  then  w.curr_quote
end
left join factory_calendar f
on a.DATE = f.dt
where ID_COMPANY = 5
and ID_GTP = 1
"
data<- dbGetQuery(con, zapros)
# zapros <- "SELECT a.* FROM energo.predict_from_gtp a
# inner join
# (SELECT date,hour,ID_COMPANY,ID_GTP,max(ID) as ID FROM energo.predict_from_gtp
# group by date,hour,ID_COMPANY,ID_GTP) b
# on a.ID = b.ID
# where a.ID_COMPANY =5 and a.ID_GTP =1 "
# prognoz<- dbGetQuery(con, zapros)
dbDisconnect(con)
data <- as.data.table(data)
# md.pattern(data)
data[,.(.N),by=.(DATE,HOUR)][N>1]
data[,`:=`(N=.N),by=.(DATE,HOUR)]
data<- data[,tail(.SD,1),by=.(DATE,HOUR)]
data<- copy(data[,.(DATE,HOUR,FACT,temp,temp_min,temp_max,
pressure,sea_level,grnd_level,humidity,speed,deg,rain,
snow,alll,weather_id,main,description,icon,day_dt
)])
data
# str(prognoz)
# prognoz$DATE <- as.Date(prognoz$DATE,'%Y-%m-%d')
# prognoz <- as.data.table(prognoz)
# prognoz <- copy(prognoz[,.(DATE,HOUR,PREDICT_GTP)])
data$DATE <- as.Date(data$DATE,'%Y-%m-%d')
data$main <- as.factor(data$main)
data$description <- as.factor(data$description)
data$icon <- as.factor(data$icon)
data$sea_level <- as.numeric(data$sea_level)
data$grnd_level <- as.numeric(data$grnd_level)
Sys.setlocale("LC_TIME", "C")
data$dayly<-as.factor(format(data$DATE,'%A'))
data$month<-as.factor(format(data$DATE,'%B'))
data$work<-ifelse(data$dayly == 'Saturday',0,ifelse(data$dayly == 'Sunday',0,1))
data<- merge(data,prognoz,by.x=c("DATE","HOUR"),by.y=c("DATE","HOUR"))
for (i in which(is.na(data$temp))) {print(i)
data[i,4:19] <- data[i-1,4:19]
}
for (i in 1:ncol(data)){
print(data[,is.na(i),with=F])
}
# from kelvin to Celsius
# data$temp <- data$temp - 273.15
# data$temp_min <- data$temp_min - 273.15
# data$temp_max <- data$temp_max - 273.15
data[,`:=`(
Clouds = as.numeric(main=="Clouds"),
Clear = as.numeric(main=="Clear"),
Fog = as.numeric(main=="Fog"),
Mist = as.numeric(main=="Mist"),
Rain= as.numeric(main=="Rain"),
Drizzle= as.numeric(main=="Drizzle"),
Snow= as.numeric(main=="Snow"),
Thunderstorm= as.numeric(main=="Thunderstorm"),
Haze= as.numeric(main=="Haze")
)
]
data$main <- NULL
data[,`:=`(
cod_200 = as.numeric(weather_id==200),
cod_201 = as.numeric(weather_id==201),
cod_202 = as.numeric(weather_id==202),
cod_211 = as.numeric(weather_id==211),
cod_300 = as.numeric(weather_id==300),
cod_301 = as.numeric(weather_id==301),
cod_302 = as.numeric(weather_id==302),
cod_310 = as.numeric(weather_id==310),
cod_312 = as.numeric(weather_id==312),
cod_500 = as.numeric(weather_id==500),
cod_501 = as.numeric(weather_id==501),
cod_502 = as.numeric(weather_id==502),
cod_503 = as.numeric(weather_id==503),
cod_602 = as.numeric(weather_id==602),
cod_615 = as.numeric(weather_id==615),
cod_701 = as.numeric(weather_id==701),
cod_721 = as.numeric(weather_id==721),
cod_741 = as.numeric(weather_id==741),
cod_800 = as.numeric(weather_id==800),
cod_801 = as.numeric(weather_id==801),
cod_802 = as.numeric(weather_id==802),
cod_803 = as.numeric(weather_id==803),
cod_804 = as.numeric(weather_id==804)
)]
data$weather_id <- NULL
data[,`:=`(
'broken_clouds' = as.numeric(description=="broken clouds"),
'drizzle' = as.numeric(description=="drizzle"),
'few_clouds' = as.numeric(description=="few clouds"),
'fog' = as.numeric(description=="fog"),
'haze' = as.numeric(description=="haze"),
'heavy_intensity_drizzle' = as.numeric(description=="heavy intensity drizzle"),
'heavy_intensity_rain' = as.numeric(description=="heavy intensity rain"),
'heavy_intensity_rain_and_drizzle' = as.numeric(description=="heavy intensity rain and drizzle"),
'heavy_snow' = as.numeric(description=="heavy snow"),
'light_intensity_drizzle' = as.numeric(description=="light intensity drizzle"),
'light_intensity_drizzle_rain' = as.numeric(description=="light intensity drizzle rain"),
'light_rain' = as.numeric(description=="light rain"),
'light_rain_and_snow' = as.numeric(description=="light rain and snow"),
'mist' = as.numeric(description=="mist"),
'moderate_rain' = as.numeric(description=="moderate rain"),
'overcast_clouds' = as.numeric(description=="overcast clouds"),
'proximity_thunderstorm' = as.numeric(description=="proximity thunderstorm"),
'scattered_clouds' = as.numeric(description=="scattered clouds"),
'sky_is_clear' = as.numeric(description=="sky is clear"),
'thunderstorm' = as.numeric(description=="thunderstorm"),
'thunderstorm_with_heavy_rain' = as.numeric(description=="thunderstorm with heavy rain"),
'thunderstorm_with_light_rain' = as.numeric(description=="thunderstorm with light rain"),
'thunderstorm_with_rain' = as.numeric(description=="thunderstorm with rain"),
'very_heavy_rain' = as.numeric(description=="very heavy rain")
)]
data$description <- NULL
data[,`:=`(
i01d =  as.numeric(icon=="01d"),
i01n =  as.numeric(icon=="01n"),
i02 =  as.numeric(icon=="02"),
i02d =  as.numeric(icon=="02d"),
i02n =  as.numeric(icon=="02n"),
i03 =  as.numeric(icon=="03"),
i03d =  as.numeric(icon=="03d"),
i03n =  as.numeric(icon=="03n"),
i04 =  as.numeric(icon=="04"),
i04d =  as.numeric(icon=="04d"),
i04n =  as.numeric(icon=="04n"),
i09d =  as.numeric(icon=="09d"),
i09n =  as.numeric(icon=="09n"),
i10d =  as.numeric(icon=="10d"),
i10n =  as.numeric(icon=="10n"),
i11d =  as.numeric(icon=="11d"),
i11n =  as.numeric(icon=="11n"),
i13d =  as.numeric(icon=="13d"),
i13n =  as.numeric(icon=="13n"),
i50d =  as.numeric(icon=="50d"),
i50n =  as.numeric(icon=="50n")
)]
data$icon <- NULL
data[,`:=`(
Monday= as.numeric(dayly=="Monday"),
Tuesday= as.numeric(dayly=="Tuesday"),
Wednesday= as.numeric(dayly=="Wednesday"),
Thursday= as.numeric(dayly=="Thursday"),
Friday= as.numeric(dayly=="Friday"),
Saturday= as.numeric(dayly=="Saturday"),
Sunday= as.numeric(dayly=="Sunday")
)]
data$dayly <- NULL
data[,`:=`(
January= as.numeric(month=="January"),
February= as.numeric(month=="February"),
March= as.numeric(month=="March"),
April= as.numeric(month=="April"),
May= as.numeric(month=="May"),
June= as.numeric(month=="June"),
July= as.numeric(month=="July"),
August= as.numeric(month=="August"),
September= as.numeric(month=="September"),
October= as.numeric(month=="October"),
November= as.numeric(month=="November"),
December= as.numeric(month=="December")
)]
data$month <- NULL
data$HOUR_0<-ifelse(test = data$HOUR==0,yes = 1,no = 0)
data$HOUR_1<-ifelse(test = data$HOUR==1,yes = 1,no = 0)
data$HOUR_2<-ifelse(test = data$HOUR==2,yes = 1,no = 0)
data$HOUR_3<-ifelse(test = data$HOUR==3,yes = 1,no = 0)
data$HOUR_4<-ifelse(test = data$HOUR==4,yes = 1,no = 0)
data$HOUR_5<-ifelse(test = data$HOUR==5,yes = 1,no = 0)
data$HOUR_6<-ifelse(test = data$HOUR==6,yes = 1,no = 0)
data$HOUR_7<-ifelse(test = data$HOUR==7,yes = 1,no = 0)
data$HOUR_8<-ifelse(test = data$HOUR==8,yes = 1,no = 0)
data$HOUR_9<-ifelse(test = data$HOUR==9,yes = 1,no = 0)
data$HOUR_10<-ifelse(test = data$HOUR==10,yes = 1,no = 0)
data$HOUR_11<-ifelse(test = data$HOUR==11,yes = 1,no = 0)
data$HOUR_12<-ifelse(test = data$HOUR==12,yes = 1,no = 0)
data$HOUR_13<-ifelse(test = data$HOUR==13,yes = 1,no = 0)
data$HOUR_14<-ifelse(test = data$HOUR==14,yes = 1,no = 0)
data$HOUR_15<-ifelse(test = data$HOUR==15,yes = 1,no = 0)
data$HOUR_16<-ifelse(test = data$HOUR==16,yes = 1,no = 0)
data$HOUR_17<-ifelse(test = data$HOUR==17,yes = 1,no = 0)
data$HOUR_18<-ifelse(test = data$HOUR==18,yes = 1,no = 0)
data$HOUR_19<-ifelse(test = data$HOUR==19,yes = 1,no = 0)
data$HOUR_20<-ifelse(test = data$HOUR==20,yes = 1,no = 0)
data$HOUR_21<-ifelse(test = data$HOUR==21,yes = 1,no = 0)
data$HOUR_22<-ifelse(test = data$HOUR==22,yes = 1,no = 0)
data$HOUR_23<-ifelse(test = data$HOUR==23,yes = 1,no = 0)
# data$HOUR <- NULL
con <- dbConnect(drv,"jdbc:mysql://185.220.32.98:3306/energo","alex", "ksf8DL347#dkfj45*")
zapros <- "SELECT year(dt) as year,month(dt) as month,max(day(dt)) as day FROM energo.factory_calendar
group by month(dt),year(dt)
order by 1,2"
datemax<- dbGetQuery(con, zapros)
dbDisconnect(con)
data[,`:=`(
year2=as.numeric(format(DATE,"%Y")),
mont2=as.numeric(format(DATE,"%m")),
day2=as.numeric(format(DATE,"%d"))
)]
data<- merge(data,datemax,by.x=c("year2","mont2"),by.y=c("year","month"),all.x = T,all.y = F)[,`:=`(p_day=day2/day)]
data$year2 <- NULL
data$mont2 <- NULL
data$day2 <- NULL
data$day <- NULL
data[,`:=`(
day_1= as.numeric(as.numeric(format(DATE,"%d"))==1),
day_2= as.numeric(as.numeric(format(DATE,"%d"))==2),
day_3= as.numeric(as.numeric(format(DATE,"%d"))==3),
day_4= as.numeric(as.numeric(format(DATE,"%d"))==4),
day_5= as.numeric(as.numeric(format(DATE,"%d"))==5),
day_6= as.numeric(as.numeric(format(DATE,"%d"))==6),
day_7= as.numeric(as.numeric(format(DATE,"%d"))==7),
day_8= as.numeric(as.numeric(format(DATE,"%d"))==8),
day_9= as.numeric(as.numeric(format(DATE,"%d"))==9),
day_10= as.numeric(as.numeric(format(DATE,"%d"))==10),
day_11= as.numeric(as.numeric(format(DATE,"%d"))==11),
day_12= as.numeric(as.numeric(format(DATE,"%d"))==12),
day_13= as.numeric(as.numeric(format(DATE,"%d"))==13),
day_14= as.numeric(as.numeric(format(DATE,"%d"))==14),
day_15= as.numeric(as.numeric(format(DATE,"%d"))==15),
day_16= as.numeric(as.numeric(format(DATE,"%d"))==16),
day_17= as.numeric(as.numeric(format(DATE,"%d"))==17),
day_18= as.numeric(as.numeric(format(DATE,"%d"))==18),
day_19= as.numeric(as.numeric(format(DATE,"%d"))==19),
day_20= as.numeric(as.numeric(format(DATE,"%d"))==20),
day_21= as.numeric(as.numeric(format(DATE,"%d"))==21),
day_22= as.numeric(as.numeric(format(DATE,"%d"))==22),
day_23= as.numeric(as.numeric(format(DATE,"%d"))==23),
day_24= as.numeric(as.numeric(format(DATE,"%d"))==24),
day_25= as.numeric(as.numeric(format(DATE,"%d"))==25),
day_26= as.numeric(as.numeric(format(DATE,"%d"))==26),
day_27= as.numeric(as.numeric(format(DATE,"%d"))==27),
day_28= as.numeric(as.numeric(format(DATE,"%d"))==28),
day_29= as.numeric(as.numeric(format(DATE,"%d"))==29),
day_30= as.numeric(as.numeric(format(DATE,"%d"))==30),
day_31= as.numeric(as.numeric(format(DATE,"%d"))==31)
)]
DATE<- data$DATE
datedata<- data$DATE
# data$DATE <- NULL
data[,`:=`(
short_day= as.numeric(day_dt=="short day"),
weekend= as.numeric(day_dt=="weekend"),
work_plan= as.numeric(day_dt=="work")
)]
data$day_dt <- NULL
f_dowle2 = function(DT) {
for (i in names(DT))
DT[is.na(get(i)), (i):=-9999]
}
f_dowle2(data)
data
lag <- 24*7
anscols = paste("lag", 1:lag, sep="_")
cols <- "FACT"
data[,(anscols):=shift(.SD, 1:lag, -9999, "lag"),.SDcols=cols][]
data<- data[lag_168!=-9999]
# data$DATE<- datedata
# data<- data[DATE>'2015-02-09']
# data<- data[DATE< '2015-08-01'|DATE>'2015-08-09']
# data<- data[DATE<'2015-10-01'|DATE>'2015-10-09']
# data<- data[DATE<'2016-01-01'| DATE>'2016-01-09']
# data<- data[DATE<'2016-07-01'|DATE>'2016-07-09']
# data<- data[DATE<'2017-02-01'|DATE>'2017-02-09']
# data$DATE <- NULL
# data<- copy(data[(lag+1+36):nrow(data),])
del_name<- data[,lapply(.SD,function(x){length(unique(x))>1})]
data<- data[,which(t(del_name)),with=F]
get_pca2 <- function(test_data,name){
fit <- prcomp(test_data[,-name,with=F])
save(fit,file="fit_pca.rda")
cum_prop <- summary(fit)$importance['Cumulative Proportion',]
test_data <- cbind(test_data, fit$x)
return(test_data)
}
# data<- get_pca2(data,"FACT")
# data<-copy(data[,round(.SD,4)])
del_name<- data[,lapply(.SD,function(x){length(unique(x))>1})]
data<- data[,which(t(del_name)),with=F]
transform_x = function(data)
{
do_transform = function(x, lambd) {
if (lambd > 0) x ^ lambd else if (lambd < 0) -(x ^ lambd) else log(x) }
x_data = data[,2]
y_data = data[,1]
lambdas = round(seq(-5, 5, 0.1)[-61],1)
corrs = sapply(lambdas,
function(lambd) cor(do_transform(x_data, lambd), y_data))
lambda = lambdas[which.max(abs(corrs))]
return(lambda)
}
nc<- ncol(data)
del_name<- data[,lapply(.SD,function(x){length(unique(x))>1})]
data<- data[,which(t(del_name)),with=F]
# data$DATE<- datedata
write(names(data),"names.txt")
fwrite(data,"data.csv")
library(RJDBC)
library(data.table)
library(mice)
setwd("E:/Cronus/R test")
getwd()
data<- fread("data.csv",integer64 = "numeric")
data$DATE <- as.Date(data$DATE,'%Y-%m-%d')
data[FACT<0]$FACT <- 0
# del_name<- data[,lapply(.SD,function(x){all(unique(x)!=c(-9999,0))})]
# data<- data[,which(t(del_name)),with=F]
# finish_test <- data[DATE >='2017-04-01'][DATE <'2017-05-01']
nr<- nrow(data)
finish_test <- data[(nr-6*30*24):nr,]
finish_test_DATE <- finish_test$DATE
finish_test_HOUR <- finish_test$HOUR
finish_test_FACT <- finish_test$FACT
data
cor(data, method = "pearson", use = "complete.obs")
finish_test$DATE <- NULL
finish_test$HOUR <- NULL
data_DATE <- data$DATE
data_HOUR <- data$HOUR
data$DATE <- NULL
data$HOUR <- NULL
print(i)
ncol(data)
for i in ncol(data){
print(i)
}
for i in ncol(data){
print(i)
}
for i in 1:ncol(data){
print(i)
}
for (i in 1:ncol(data)){
print(i)
}
data
data[,i]
for (i in 1:ncol(data)){
print(i)
data[,is.na(i),with=F]
}
data[,is.na(i),with=F]
data[,is.numeric(i),with=F]
data[,is.numeric(i),with=F]
data[,is.numeric(i),with=F]
for (i in 1:ncol(data)){
print(i)
data[,is.numeric(i),with=F]
}
print(data[,is.numeric(i),with=F])
for (i in 1:ncol(data)){
print(i)
print(data[,is.numeric(i),with=F])
}
data[,i,with=F]
is.numeric(data[,i,with=F])
str(data[,i,with=F])
is.numeric(data[,i,with=F])
is.numeric(as.data.frame(data[,i,with=F]))
as.data.frame(data[,i,with=F])
str(as.data.frame(data[,i,with=F]))
is.numeric(data$November)
is.numeric(as.data.frame(data[,i,with=F]))
data[,i,with=F]
is.numeric(data$lag_168)
for (i in 1:ncol(data)){
print(data[,is.na(i),with=F])
}
lapply(data,is.numeric)
sapply(data,is.numeric)
sapply(data,is.numeric==T)
sapply(data,is.numeric)
sapply(data,is.numeric)==T
which(sapply(data,is.numeric))
which(sapply(data,is.numeric)!=T)
cor(data, method = "pearson", use = "complete.obs")
data$FACT
cor(data, method = "pearson", use = "complete.obs")
plot(cor(data, method = "pearson", use = "complete.obs"))
plot(cor(data))
cor_matr<- cor(data)
cor_matr
diag(cor_matr) <- 0
cor_matr
upper.tri(cor_matr)
cor_matr<- upper.tri(cor_matr)
cor_matr<- cor(data)
diag(cor_matr) <- 0
cor_matr[upper.tri(cor_matr)] <- NA
cor_matr
cor_matr[1:2,1:2]
cor_matr[1:3,1:3]
cor_matr<- abs(cor_matr)
cor_matr[1:3,1:3]
max(cor_matr[1:3,1:3])
cor_matr[upper.tri(cor_matr)] <- 0
cor_matr<- cor(data)
cor_matr
diag(cor_matr) <- 0
upper.tri(cor_matr)
cor_matr[upper.tri(cor_matr)] <- 0
cor_matr<- abs(cor_matr)
cor_matr[1:3,1:3]
max(cor_matr[1:3,1:3])
which.max(cor_matr[1:3,1:3])
which.max(cor_matr[1:3,1:3])
which.max(cor_matr[1:3,1:3])
6/3
5/2
3*2.5
3*0.5
5/3
3*0.6667
11/3
max.col(cor_matr[1:3,1:3])
cor_matr[1:3,1:3]
17/7
11/7
which.max(cor_matr[1:3,1:3])
cor_matr[1:3,1:3]
which.max(cor_matr[1:3,1:3])
which.max(cor_matr[1:3,1:3])/nrow(cor_matr[1:3,1:3])
5/2
ceiling(5/2)
ceiling(5/3)
ceiling(which.max(cor_matr[1:3,1:3])/nrow(cor_matr[1:3,1:3]))
5/3
which.max(cor_matr[1:3,1:3])
which.max(cor_matr[1:3,1:3])-nrow(cor_matr[1:3,1:3])
28/7
27/7
26/7
11/7
19/7
which.max(cor_matr[1:3,1:3])-nrow(cor_matr[1:3,1:3])
16/4
ceiling(which.max(cor_matr[1:3,1:3])/nrow(cor_matr[1:3,1:3]))*nrow(cor_matr[1:3,1:3]))
nrow(cor_matr[1:3,1:3])
nrow(cor_matr[1:3,1:3])*(ceiling(which.max(cor_matr[1:3,1:3])/nrow(cor_matr[1:3,1:3]))-1)
nrow(cor_matr[1:3,1:3])*(ceiling(which.max(cor_matr[1:3,1:3])/nrow(cor_matr[1:3,1:3]))-1)+1
which.max(cor_matr[1:3,1:3])-nrow(cor_matr[1:3,1:3])*(ceiling(which.max(cor_matr[1:3,1:3])/nrow(cor_matr[1:3,1:3]))-1)+1
which.max(cor_matr[1:3,1:3])-(nrow(cor_matr[1:3,1:3])*(ceiling(which.max(cor_matr[1:3,1:3])/nrow(cor_matr[1:3,1:3]))-1)+1)
which.max(cor_matr[1:3,1:3])-(nrow(cor_matr[1:3,1:3])*(ceiling(which.max(cor_matr[1:3,1:3])/nrow(cor_matr[1:3,1:3]))-1)+1)+1
cor_matr
which.max(cor_matr)
ceiling(which.max(cor_matr)/nrow(cor_matr))
which.max(cor_matr)-(nrow(cor_matr)*(ceiling(which.max(cor_matr)/nrow(cor_matr))-1)+1)+1
matrix(1:293,1:293)
as.matrix(1:293,1:293)
colll<- ceiling(which.max(cor_matr)/nrow(cor_matr))
roww<- which.max(cor_matr)-(nrow(cor_matr)*(ceiling(which.max(cor_matr)/nrow(cor_matr))-1)+1)+1
colll
roww
