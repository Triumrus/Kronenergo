con <- dbConnect(drv,"jdbc:mysql://185.220.32.98:3306/energo","alex", "ksf8DL347#dkfj45*")
zapros <- "
SELECT * FROM energo.data_predict
where ID_COMPANY = 5
and ID_GTP = 1
"
data<- dbGetQuery(con, zapros)
dbDisconnect(con)
data
library(RJDBC)
library(data.table)
library(mice)
library(stringr)
library(xgboost)
library(RRF)
setwd("C:/Users/trium/Downloads/R test")
getwd()
drv <- JDBC("com.mysql.jdbc.Driver",
"E:/Cronus/mysql-connector-java-5.1.45/mysql-connector-java-5.1.45/mysql-connector-java-5.1.45-bin.jar", "`")
# "C:/Users/user/Documents/Downloads/sqldeveloper/jdbc/lib/mysql-connector-java-3.1.14/mysql-connector-java-3.1.14-bin.jar", "`")
con <- dbConnect(drv,"jdbc:mysql://185.220.32.98:3306/energo","alex", "ksf8DL347#dkfj45*")
zapros <- "
SELECT * FROM energo.data_predict
where ID_COMPANY = 5
and ID_GTP = 1
"
data<- dbGetQuery(con, zapros)
dbDisconnect(con)
data <- as.data.table(data)
data
# md.pattern(data)
data[,.(.N),by=.(DATE,HOUR)][N>1]
data[,`:=`(N=.N),by=.(DATE,HOUR)]
data<- data[,tail(.SD,1),by=.(DATE,HOUR)]
ID_COMPANY<- data$ID_COMPANY
ID_GTP<- data$ID_GTP
date_pred <- data$DATE
CITY_ID <- unique(data$CITY_ID)
data<- copy(data[,.(DATE,HOUR,FACT,temp,temp_min,temp_max,
pressure,sea_level,grnd_level,humidity,speed,deg,rain,
snow,alll,weather_id,main,description,icon,day_dt
)])
data$DATE <- as.Date(data$DATE,'%Y-%m-%d')
data$main <- as.factor(data$main)
data$description <- as.factor(data$description)
data$icon <- as.factor(data$icon)
data$sea_level <- as.numeric(data$sea_level)
data$grnd_level <- as.numeric(data$grnd_level)
data$dayly<-as.factor(format(data$DATE,'%A'))
data$month<-as.factor(format(data$DATE,'%B'))
data$work<-ifelse(data$dayly == 'суббота',0,ifelse(data$dayly == 'воскресенье',0,1))
for (i in which(is.na(data$temp))) {print(i)
data[i,4:19] <- data[i-1,4:19]
}
# data[,lapply(.SD,function(x){all(is.na(x))})]
# from kelvin to Celsius
# data$temp <- data$temp - 273.15
# data$temp_min <- data$temp_min - 273.15
# data$temp_max <- data$temp_max - 273.15
data[,`:=`(
Clouds = as.numeric(main=="Clouds"),
Clear = as.numeric(main=="Clear"),
Fog = as.numeric(main=="Fog"),
Mist = as.numeric(main=="Mist"),
Rain= as.numeric(main=="Rain"),
Drizzle= as.numeric(main=="Drizzle"),
Snow= as.numeric(main=="Snow"),
Thunderstorm= as.numeric(main=="Thunderstorm"),
Haze= as.numeric(main=="Haze")
)
]
data$main <- NULL
data[,`:=`(
cod_200 = as.numeric(weather_id==200),
cod_201 = as.numeric(weather_id==201),
cod_202 = as.numeric(weather_id==202),
cod_211 = as.numeric(weather_id==211),
cod_300 = as.numeric(weather_id==300),
cod_301 = as.numeric(weather_id==301),
cod_302 = as.numeric(weather_id==302),
cod_310 = as.numeric(weather_id==310),
cod_312 = as.numeric(weather_id==312),
cod_500 = as.numeric(weather_id==500),
cod_501 = as.numeric(weather_id==501),
cod_502 = as.numeric(weather_id==502),
cod_503 = as.numeric(weather_id==503),
cod_602 = as.numeric(weather_id==602),
cod_615 = as.numeric(weather_id==615),
cod_701 = as.numeric(weather_id==701),
cod_721 = as.numeric(weather_id==721),
cod_741 = as.numeric(weather_id==741),
cod_800 = as.numeric(weather_id==800),
cod_801 = as.numeric(weather_id==801),
cod_802 = as.numeric(weather_id==802),
cod_803 = as.numeric(weather_id==803),
cod_804 = as.numeric(weather_id==804)
)]
data$weather_id <- NULL
data[,`:=`(
'broken_clouds' = as.numeric(description=="broken clouds"),
'drizzle' = as.numeric(description=="drizzle"),
'few_clouds' = as.numeric(description=="few clouds"),
'fog' = as.numeric(description=="fog"),
'haze' = as.numeric(description=="haze"),
'heavy_intensity_drizzle' = as.numeric(description=="heavy intensity drizzle"),
'heavy_intensity_rain' = as.numeric(description=="heavy intensity rain"),
'heavy_intensity_rain_and_drizzle' = as.numeric(description=="heavy intensity rain and drizzle"),
'heavy_snow' = as.numeric(description=="heavy snow"),
'light_intensity_drizzle' = as.numeric(description=="light intensity drizzle"),
'light_intensity_drizzle_rain' = as.numeric(description=="light intensity drizzle rain"),
'light_rain' = as.numeric(description=="light rain"),
'light_rain_and_snow' = as.numeric(description=="light rain and snow"),
'mist' = as.numeric(description=="mist"),
'moderate_rain' = as.numeric(description=="moderate rain"),
'overcast_clouds' = as.numeric(description=="overcast clouds"),
'proximity_thunderstorm' = as.numeric(description=="proximity thunderstorm"),
'scattered_clouds' = as.numeric(description=="scattered clouds"),
'sky_is_clear' = as.numeric(description=="sky is clear"),
'thunderstorm' = as.numeric(description=="thunderstorm"),
'thunderstorm_with_heavy_rain' = as.numeric(description=="thunderstorm with heavy rain"),
'thunderstorm_with_light_rain' = as.numeric(description=="thunderstorm with light rain"),
'thunderstorm_with_rain' = as.numeric(description=="thunderstorm with rain"),
'very_heavy_rain' = as.numeric(description=="very heavy rain")
)]
data$description <- NULL
data[,`:=`(
i01d =  as.numeric(icon=="01d"),
i01n =  as.numeric(icon=="01n"),
i02 =  as.numeric(icon=="02"),
i02d =  as.numeric(icon=="02d"),
i02n =  as.numeric(icon=="02n"),
i03 =  as.numeric(icon=="03"),
i03d =  as.numeric(icon=="03d"),
i03n =  as.numeric(icon=="03n"),
i04 =  as.numeric(icon=="04"),
i04d =  as.numeric(icon=="04d"),
i04n =  as.numeric(icon=="04n"),
i09d =  as.numeric(icon=="09d"),
i09n =  as.numeric(icon=="09n"),
i10d =  as.numeric(icon=="10d"),
i10n =  as.numeric(icon=="10n"),
i11d =  as.numeric(icon=="11d"),
i11n =  as.numeric(icon=="11n"),
i13d =  as.numeric(icon=="13d"),
i13n =  as.numeric(icon=="13n"),
i50d =  as.numeric(icon=="50d"),
i50n =  as.numeric(icon=="50n")
)]
data$icon <- NULL
data[,`:=`(
Monday= as.numeric(dayly=="понедельник"),
Tuesday= as.numeric(dayly=="вторник"),
Wednesday= as.numeric(dayly=="среда"),
Thursday= as.numeric(dayly=="четверг"),
Friday= as.numeric(dayly=="пятница"),
Saturday= as.numeric(dayly=="суббота"),
Sunday= as.numeric(dayly=="воскресенье")
)]
data$dayly <- NULL
data[,`:=`(
January= as.numeric(month=="Январь"),
February= as.numeric(month=="Февраль"),
March= as.numeric(month=="Март"),
April= as.numeric(month=="Апрель"),
May= as.numeric(month=="Май"),
June= as.numeric(month=="Июнь"),
July= as.numeric(month=="Июль"),
August= as.numeric(month=="Август"),
September= as.numeric(month=="Сентябрь"),
October= as.numeric(month=="Октябрь"),
November= as.numeric(month=="Ноябрь"),
December= as.numeric(month=="Декабрь")
)]
data$month <- NULL
data$HOUR_0<-ifelse(test = data$HOUR==0,yes = 1,no = 0)
data$HOUR_1<-ifelse(test = data$HOUR==1,yes = 1,no = 0)
data$HOUR_2<-ifelse(test = data$HOUR==2,yes = 1,no = 0)
data$HOUR_3<-ifelse(test = data$HOUR==3,yes = 1,no = 0)
data$HOUR_4<-ifelse(test = data$HOUR==4,yes = 1,no = 0)
data$HOUR_5<-ifelse(test = data$HOUR==5,yes = 1,no = 0)
data$HOUR_6<-ifelse(test = data$HOUR==6,yes = 1,no = 0)
data$HOUR_7<-ifelse(test = data$HOUR==7,yes = 1,no = 0)
data$HOUR_8<-ifelse(test = data$HOUR==8,yes = 1,no = 0)
data$HOUR_9<-ifelse(test = data$HOUR==9,yes = 1,no = 0)
data$HOUR_10<-ifelse(test = data$HOUR==10,yes = 1,no = 0)
data$HOUR_11<-ifelse(test = data$HOUR==11,yes = 1,no = 0)
data$HOUR_12<-ifelse(test = data$HOUR==12,yes = 1,no = 0)
data$HOUR_13<-ifelse(test = data$HOUR==13,yes = 1,no = 0)
data$HOUR_14<-ifelse(test = data$HOUR==14,yes = 1,no = 0)
data$HOUR_15<-ifelse(test = data$HOUR==15,yes = 1,no = 0)
data$HOUR_16<-ifelse(test = data$HOUR==16,yes = 1,no = 0)
data$HOUR_17<-ifelse(test = data$HOUR==17,yes = 1,no = 0)
data$HOUR_18<-ifelse(test = data$HOUR==18,yes = 1,no = 0)
data$HOUR_19<-ifelse(test = data$HOUR==19,yes = 1,no = 0)
data$HOUR_20<-ifelse(test = data$HOUR==20,yes = 1,no = 0)
data$HOUR_21<-ifelse(test = data$HOUR==21,yes = 1,no = 0)
data$HOUR_22<-ifelse(test = data$HOUR==22,yes = 1,no = 0)
data$HOUR_23<-ifelse(test = data$HOUR==23,yes = 1,no = 0)
# data$HOUR <- NULL
con <- dbConnect(drv,"jdbc:mysql://185.220.32.98:3306/energo","alex", "ksf8DL347#dkfj45*")
zapros <- "SELECT year(dt) as year,month(dt) as month,max(day(dt)) as day FROM energo.factory_calendar
group by month(dt),year(dt)
order by 1,2"
datemax<- dbGetQuery(con, zapros)
dbDisconnect(con)
data[,`:=`(
year2=as.numeric(format(DATE,"%Y")),
mont2=as.numeric(format(DATE,"%m")),
day2=as.numeric(format(DATE,"%d"))
)]
data<- merge(data,datemax,by.x=c("year2","mont2"),by.y=c("year","month"),all.x = T,all.y = F)[,`:=`(p_day=day2/day)]
data$year2 <- NULL
data$mont2 <- NULL
data$day2 <- NULL
data$day <- NULL
data[,`:=`(
day_1= as.numeric(as.numeric(format(DATE,"%d"))==1),
day_2= as.numeric(as.numeric(format(DATE,"%d"))==2),
day_3= as.numeric(as.numeric(format(DATE,"%d"))==3),
day_4= as.numeric(as.numeric(format(DATE,"%d"))==4),
day_5= as.numeric(as.numeric(format(DATE,"%d"))==5),
day_6= as.numeric(as.numeric(format(DATE,"%d"))==6),
day_7= as.numeric(as.numeric(format(DATE,"%d"))==7),
day_8= as.numeric(as.numeric(format(DATE,"%d"))==8),
day_9= as.numeric(as.numeric(format(DATE,"%d"))==9),
day_10= as.numeric(as.numeric(format(DATE,"%d"))==10),
day_11= as.numeric(as.numeric(format(DATE,"%d"))==11),
day_12= as.numeric(as.numeric(format(DATE,"%d"))==12),
day_13= as.numeric(as.numeric(format(DATE,"%d"))==13),
day_14= as.numeric(as.numeric(format(DATE,"%d"))==14),
day_15= as.numeric(as.numeric(format(DATE,"%d"))==15),
day_16= as.numeric(as.numeric(format(DATE,"%d"))==16),
day_17= as.numeric(as.numeric(format(DATE,"%d"))==17),
day_18= as.numeric(as.numeric(format(DATE,"%d"))==18),
day_19= as.numeric(as.numeric(format(DATE,"%d"))==19),
day_20= as.numeric(as.numeric(format(DATE,"%d"))==20),
day_21= as.numeric(as.numeric(format(DATE,"%d"))==21),
day_22= as.numeric(as.numeric(format(DATE,"%d"))==22),
day_23= as.numeric(as.numeric(format(DATE,"%d"))==23),
day_24= as.numeric(as.numeric(format(DATE,"%d"))==24),
day_25= as.numeric(as.numeric(format(DATE,"%d"))==25),
day_26= as.numeric(as.numeric(format(DATE,"%d"))==26),
day_27= as.numeric(as.numeric(format(DATE,"%d"))==27),
day_28= as.numeric(as.numeric(format(DATE,"%d"))==28),
day_29= as.numeric(as.numeric(format(DATE,"%d"))==29),
day_30= as.numeric(as.numeric(format(DATE,"%d"))==30),
day_31= as.numeric(as.numeric(format(DATE,"%d"))==31)
)]
DATE<- data$DATE
datedata<- data$DATE
# data$DATE <- NULL
data[,`:=`(
short_day= as.numeric(day_dt=="short day"),
weekend= as.numeric(day_dt=="weekend"),
work_plan= as.numeric(day_dt=="work")
)]
data$day_dt <- NULL
f_dowle2 = function(DT) {
for (i in names(DT))
DT[is.na(get(i)), (i):=-9999]
}
f_dowle2(data)
lag <- 24*7
anscols = paste("lag", 1:lag, sep="_")
cols <- "FACT"
data[,(anscols):=shift(.SD, 1:lag, -9999, "lag"),.SDcols=cols][]
name <- read.table("names.txt")
name<- name$V1
name <- as.character(name)
which(!names(data)%in%name)
which(!name%in%names(data))
data<- data[,which(names(data)%in%name),with=F]
names_data <- names(data)
# names(data) <- c("FACT",paste0("V",2:ncol(data)))
DATE <- data$DATE
HOUR <- data$HOUR
data$DATE <- NULL
data$HOUR <- NULL
load("C:/Users/trium/Downloads/R test/atomsbt_5_1.rda")
N_unknow<- data[FACT==-9999,.N]
datainbase<- data[,.(PREDICT=-9999,DATE=DATE,HOUR=HOUR,ID_COMPANY=ID_COMPANY,ID_GTP=ID_GTP)]
for (i in ((nrow(data)-N_unknow)+1):nrow(data)) {
datainbase$PREDICT[i] <- predict(clf2,data.matrix(data[i,-"FACT"]),ntreelimit = clf2$best_iteration)
data$FACT[i]<- predict(clf2,data.matrix(data[i,-"FACT"]),ntreelimit = clf2$best_iteration)
data[,(anscols):=shift(.SD, 1:lag, -9999, "lag"),.SDcols=cols]
}
datainbase<- tail(datainbase,24)
datainbase$DATE_ZALIVA <- as.character(as.Date(Sys.Date(),"YYYY-MM-DD"))
datainbase$DATE <- as.character(datainbase$DATE)
# datainbase$DATE_ZALIVA <- as.character(datainbase$DATE_ZALIVA)
drv <- JDBC("com.mysql.jdbc.Driver",
"E:/Cronus/mysql-connector-java-5.1.45/mysql-connector-java-5.1.45/mysql-connector-java-5.1.45-bin.jar", "`")
# "C:/Users/user/Documents/Downloads/sqldeveloper/jdbc/lib/mysql-connector-java-3.1.14/mysql-connector-java-3.1.14-bin.jar", "`")
con <- dbConnect(drv,"jdbc:mysql://185.220.32.98:3306/energo","alex", "ksf8DL347#dkfj45*")
check_zap<- paste("SELECT * FROM energo.PREDICT_ENERGO
where ID_COMPANY = 5 and ID_GTP = 1 and DATE >=",min(datainbase$DATE)," order by id desc limit 24")
check <- dbGetQuery(con, check_zap)
check<- as.data.table(check)
check<- check[order(ID)]
check
datainbase
library(RJDBC)
library(data.table)
library(mice)
setwd("C:/Users/trium/Downloads/R test")
getwd()
data<- fread("data.csv",integer64 = "numeric")
# data<- data[,c(1:167,204:335),with=F]
# data<- data[,c(1:97,109:259),with=F]
# data<- data[,grep("day",names(data),invert = T),with=F]
names(data)
data$DATE <- as.Date(data$DATE,'%Y-%m-%d')
# del_name<- data[,lapply(.SD,function(x){all(unique(x)!=c(-9999,0))})]
# data<- data[,which(t(del_name)),with=F]
# finish_test <- data[DATE >='2017-04-01'][DATE <'2017-05-01']
nr<- nrow(data)
finish_test <- data[(nr-6*30*24):nr,]
# finish_test <- data[DATE >='2017-04-01']
# data <- data[DATE > '2017-01-01']
# data <- data[DATE < '2017-04-01' | DATE >= '2017-05-01']
# data <- data[DATE < '2017-04-01' ]
# data <- data[DATE > '2017-01-01']
# data <- data[DATE > '2017-05-01']
# data[DATE=='2017-06-01']
# data[DATE=='2017-04-15']
# data <- data[FACT<=685]
# data <- data[FACT>=-151]
finish_test_DATE <- finish_test$DATE
finish_test_HOUR <- finish_test$HOUR
finish_test_FACT <- finish_test$FACT
finish_test$DATE <- NULL
finish_test$HOUR <- NULL
data_DATE <- data$DATE
data_HOUR <- data$HOUR
data$DATE <- NULL
data$HOUR <- NULL
# str(data)
# names(data) <- c("FACT",paste0("V",2:ncol(data)))
# names(finish_test) <- c("FACT",paste0("V",2:ncol(finish_test)))
# name<- read.table("names.txt")
# name<- name$V1
# name <- as.character(name)
# name<- name[3:length(name)]
# data <- data[(nrow(data)-720):nrow(data)]
# train <- data[1:673]
# test <- data[674:721]
# BOOSTRAP
set.seed(777)
sam<- sample(nrow(data),nrow(data),replace = T)
# sam<- sample(nrow(data),nrow(data)*0.7,replace = F)
# train<- data[1:2641,]
# test<- data[2642:2664,]
train <- copy(data[sam,])
test <- copy(data[-sam,])
# train <- data
data <- as.data.frame(data)
for (i in 1:ncol(data)) {
# print(c(i,any(is.na(data[,i,with=F]))))
print(c(i,any(is.infinite(data[,i]))))
print(c(i,any(is.na(data[,i]))))
print(c(i,any(is.nan(data[,i]))))
print(c(i,all(data[,i]==0)))
}
# library(MASS)
# fit_ridge<-lm.ridge(FACT~.,data = train,lambda = seq(0,100,1))
# plot(x = fit_ridge$lambda,y = fit_ridge$GCV,type="o")
# lambda<-fit_ridge$GCV[which.min(fit_ridge$GCV)]
# lamda<-as.numeric(names(lambda))
# fit_ridge<-lm.ridge(FACT~.,data = train,lambda = lamda)
# beta.fit_ridge<-coef(fit_ridge)
# m<-length(coef(fit_ridge))
#
# all(names(train[,2:ncol(train)])%in%names(beta.fit_ridge[2:m]))
#  # names(train[,-"FACT"][,which(names(train[,2:ncol(train)])%in%names(beta.fit_ridge[2:m])==F),with=F])
#  # names(beta.fit_ridge[2:m])[which(names(train[,2:ncol(train)])%in%names(beta.fit_ridge[2:m])==F)]
#
#
# train$ridge <- beta.fit_ridge[1]+as.matrix(train[,-"FACT"])%*%beta.fit_ridge[2:m]
# train[,.(mean(abs(FACT-ridge)))]
#
# test$ridge <- beta.fit_ridge[1]+as.matrix(test[,-"FACT"])%*%beta.fit_ridge[2:m]
# test[,.(mean(abs(FACT-ridge)))]
#
# finish_test<- finish_test[,which(names(finish_test)%in%names(train)),with=F]
#
# finish_test$ridge <- beta.fit_ridge[1]+as.matrix(finish_test[,-"FACT"])%*%beta.fit_ridge[2:m]
#
# finish_test[,.(mean(abs(FACT-ridge)))]
#
# cbind(test$FACT,test$ridge)[(which.min(test$ridge)-10):(which.min(test$ridge)+10),]
# t(test[which.min(test$ridge),])
# test[which.min(test$ridge),][,2]
#
# (cor(cbind(test$FACT,test$ridge))^2)[1,2]
# plot(test$FACT,test$ridge)
#
# train$ridge <- beta.fit_ridge[1]+as.matrix(train[,-"FACT"])%*%beta.fit_ridge[2:m]
# (cor(cbind(train$FACT,train$ridge))^2)[1,2]
# plot(train$FACT,train$ridge)
# summary(train$ridge)
# summary(train$FACT)
#
# save(fit_ridge,file="fit_ridge.rda")
# load("fit_ridge.rda")
# XGBOOST liner
library(xgboost)
trainLabel <-  train$FACT
testlabel <- test$FACT
train$FACT <-  NULL
test$FACT <-  NULL
dtrain = xgb.DMatrix(data=data.matrix(train),label=trainLabel,missing = NaN)
dtest = xgb.DMatrix(data=data.matrix(test),label=testlabel,missing = NaN)
watchlist<-list(train=dtrain,test=dtest)
# evalerror <- function(preds, dtrain) {
#   labels <- getinfo(dtrain, "label")
#   err <-(cor(cbind(preds,labels))^2)[1,2]
#     return(list(metric = "R2", value = err))
# }
# evalerror <- function(preds, dtrain) {
#   # labels <- getinfo(dtrain, "label")
#   labels <- getinfo(dtrain, "label")
#   err <-mean(abs(preds-labels))
#   return(list(metric = "absotkl", value = err))
# }
evalerror_percent <- function(preds, dtrain) {
# labels <- getinfo(dtrain, "label")
labels <- getinfo(dtrain, "label")
err <-mean((abs(preds-labels)/labels)*100)
return(list(metric = "otklpercent", value = err))
}
param <- list(  objective           = "reg:linear",
booster = "gblinear",
# eval_metric = "rmse",
eval_metric = evalerror_percent,
eta                 = 0.3, # 0.06, #0.01,
max_depth           = 6, #changed from default of 8
subsample           = 0.7, # 0.7
colsample_bytree    = 0.7
# num_parallel_tree   = 2
# alpha = 0.0001,
# lambda = 1
# lambda_bias = 1
)
set.seed(777)
clf2 <- xgb.train(   params              = param,
data                = dtrain,
nrounds             = 20000,
verbose             = 1,
early.stop.round    = 15,
#feval = normalizedGini,
watchlist           = watchlist,
maximize            = F
)
data
finish_test
lag <- 24*7
anscols = paste("lag", 1:lag, sep="_")
cols <- "FACT"
# data[,(anscols):=shift(.SD, 1:lag, -9999, "lag"),.SDcols=cols][]
finish_test_check<- as.data.table(cbind(as.character(finish_test_DATE),finish_test_HOUR,finish_test$FACT))
finish_test_check$pred <- -9999
finish_test_check$V3 <- as.numeric(finish_test_check$V3)
for (i in 181:nrow(finish_test)) {
finish_test_check$pred[i] <- predict(clf2,data.matrix(finish_test[i,-"FACT"]),ntreelimit = clf2$best_iteration)
finish_test$FACT[i]<- predict(clf2,data.matrix(finish_test[i,-"FACT"]),ntreelimit = clf2$best_iteration)
ifelse(any(i==seq(216,nrow(finish_test),36)),finish_test$FACT <- finish_test_check$V3,print(i))
finish_test[,(anscols):=shift(.SD, 1:lag, -9999, "lag"),.SDcols=cols][]
}
finish_test_check[pred!=-9999][]
finish_test_check[pred!=-9999][,.(abs_otk=mean(abs(V3-pred)),percent=(mean((abs(V3-pred)/V3)*100))),by=month(V1)]
save(clf2,file="atomsbt_5_1.rda")
setwd ("E:/Cronus/Historical_data")
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/",fold,"/upload/fact.csv"))
library("Rcurl")
library(RCurl)
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/",fold,"/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/atomsbt/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/atomsbt/upload/"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/atomsbt/upload"))
ftpUpload(test,paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/atomsbt/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/atomsbt/upload/"))
ftpUpload("",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/atomsbt/upload/fact.csv"))
ftpUpload("Helo World",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/atomsbt/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/atomsbt/upload/fact.csv"))
I("Some text to be uploaded into a file\nwith several lines")
system.file("examples", "system.png", package = "RCurl")
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/user1/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
library(RCurl)
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://root:jkndsf384ejhfh938gijk@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://suhona:bd3033d7ba0a222acf6e41b2ce8e6c54@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://alex:ksf8DL347#dkfj45*@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://suhona:bd3033d7ba0a222acf6e41b2ce8e6c54@185.220.32.98/clients/energoeffect/upload/fact.csv"))
ftpUpload("fact.csv",paste0("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/atomsbt/upload/fact.csv"))
fread("ftp://api:vfnhbo8934ykfjhg@185.220.32.98/clients/atomsbt/upload/fact.csv")
